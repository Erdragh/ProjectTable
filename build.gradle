import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
	id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.9.23"
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
	id "com.modrinth.minotaur" version "2.+" // modrinth plugin
	id "com.matthewprenger.cursegradle" version "1.+" // curseforge publishing
}

sourceCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group

// Formats the mod version to include the Minecraft version and build number (if present)
// example: 1.0.0+1.18.2-100
String runNumber = System.getenv("GITHUB_RUN_NUMBER")
String build = runNumber != null ? "build.$runNumber" : "local"
version = "$mod_version-$build+mc$minecraft_version"

loom {
	accessWidenerPath = file("src/main/resources/${archives_base_name}.accesswidener")
}

repositories {
    mavenCentral()
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
    maven { url = "https://maven.shedaniel.me/" } // REI
    maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
	maven { // for forge config api port
		name = "Fuzs Mod Resources"
		url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
	}
    // for the cardinal components API, used by polymorph
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// Dependencies
	implementation 'com.electronwill.night-config:core:3.6.5'
	implementation 'com.electronwill.night-config:toml:3.6.5'
	modImplementation "curse.maven:forge_config_api-547434:$forge_config_api_cf_file"

	// Optional dependency
	modImplementation "curse.maven:polymorph-fabric-397434:$polymorph_cf_file"
    // Adds a dependency on the base cardinal components module (required by every other module)
    // Replace modImplementation with modApi if you expose components in your own API
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:$cardinal_components_version"
    // Adds a dependency on a specific module
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:$cardinal_components_version"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-item:$cardinal_components_version"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:$cardinal_components_version"

	// used to prevent forge config api port from complaining
	modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
	modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }

    // Development QOL
	modImplementation("maven.modrinth:lazydfu:${lazydfu_version}")
	modImplementation("com.terraformersmc:modmenu:${modmenu_version}")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modImplementation("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"); break
        case "rei": modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modImplementation("dev.emi:emi:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
    // if you would like to add integration with them, uncomment them here.
//    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}")
//    modCompileOnly("mezz.jei:jei-${minecraft_version}-common:${jei_fabric_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")
//    modCompileOnly("dev.emi:emi:${emi_version}")
}

processResources {
    def props = new Properties()
    file("gradle.properties").withInputStream { props.load(it) }

    filesMatching("fabric.mod.json") {
        expand props
    }
}

machete {
    // Only optimize published releases
    var publishingEnv = System.getenv("PUBLISHING")
    enabled = publishingEnv != null && publishingEnv.toLowerCase() == "true"
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 17
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(Integer.parseInt(sourceCompatibility))
}

java {
    def javaVersion = JavaVersion.toVersion(sourceCompatibility)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(sourceCompatibility)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

apply from: "gradle/publishing/publishing.gradle"
